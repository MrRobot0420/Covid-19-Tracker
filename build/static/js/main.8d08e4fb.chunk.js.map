{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","active","isRed","isGreen","isOrange","cases","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","fillColor","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sortedData","sort","a","b","buildChartData","prevData","caseType","chartData","date","newData","x","y","push","showDataOnMap","map","country","i","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","MyComponent","useMap","flyTo","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","parser","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","useEffect","fetch","then","res","json","console","log","getGraphData","length","datasets","backgroundColor","borderColor","App","setCountries","mapCountires","setMapCountries","setCountry","setCountryInfo","tableData","setTableData","casesType","setCasesType","mapCenter","setMapCenter","mapZoom","setMapZoom","response","name","iso2","getCountriesData","onCountryChnage","e","preventDefault","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d08e4fb.chunk.js","sourcesContent":["import React from 'react'\nimport {Card, CardContent, Typography} from '@material-ui/core';\nimport './infoBox.css';\n\nfunction InfoBox({title, active, isRed,isGreen,isOrange,cases,total, ...props}) {\n    return (\n\n           <Card className={`infobox ${active && \"infobox--selected\"} ${\n        isRed && \"infobox--red\"} ${isGreen && \"infobox--green\"} ${isOrange && \"infobox--orange\"}`} onClick={props.onClick}>\n               <CardContent >\n                   {/* {title} */}\n                    <Typography  className=\"infobox__title\" color=\"textSecondary\">{title}</Typography>\n                   {/* {cases} */}\n                    <h2 className={`infobox__cases ${isGreen && \"infobox__cases--green\"} ${isOrange && \"infobox__cases--orange\"}`}>{cases}</h2>\n                   {/* {total cases} */}\n                    <Typography className=\"infobox__total\" color=\"textSecondary\">{total} Total</Typography>\n               </CardContent>\n            </Card> \n    )\n}\n\nexport default InfoBox\n","import {Circle, Popup} from \"react-leaflet\";\nimport React from \"react\";\nimport numeral from \"numeral\"\n\n\nconst casesTypeColors = {\n  cases: {\n    color: \"red\",\n    fillColor:\"red\",\n    multiplier: 350,\n  },\n  recovered: {\n      color: \"#7dd71d\",\n    fillColor:\"#7dd71d\",\n    multiplier: 350,\n  },\n  deaths: {\n    color: \"orange\",\n    fillColor:\"orange\",\n    multiplier: 400,\n  },\n};\n\n\n\nexport const prettyPrintStat = (stat) => (\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\");\n\nexport const sortData = (data) =>{\n    const sortedData = [...data]\n\n    sortedData.sort((a,b) => a.cases>b.cases? -1: 1)\n\n    return sortedData\n}\n\nexport const buildChartData = (data, caseType=\"cases\") => {\n        const chartData = [] \n        let prevData;\n        for(let date in data[caseType]) {\n            if(prevData) {\n                let newData = {\n                    x:date,\n                    y:data[caseType][date] - prevData\n                }\n                chartData.push(newData);\n            }\n            prevData = data[caseType][date]\n        }\n        return chartData;\n}\n\nexport const showDataOnMap =  ((data, caseType='cases') => \n    data.map((country,i) => (\n        <Circle\n        key={i}\n        center = {[country.countryInfo.lat,country.countryInfo.long]}\n        fillOpacity ={0.4}\n        // color ={casesTypeColors[caseType].hex}\n        // fillColor = {casesTypeColors[caseType].hex}   \n        pathOptions={casesTypeColors[caseType]}  \n        radius = {\n            Math.sqrt(country[caseType]) * casesTypeColors[caseType].multiplier\n        }\n        >\n        <Popup>\n        <div className=\"info-container\">\n            <div \n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}></div>\n            <div className=\"info-name\">{country.country}</div>\n            <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n            <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n            <div className=\"info-deaths\"> Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n        </div>\n        </Popup>\n        </Circle>\n\n    )));\n\n    \n","import React from \"react\";\nimport { MapContainer as LeafletMap, TileLayer,useMap} from \"react-leaflet\";\nimport {showDataOnMap} from \"./util\"\nimport \"./Map.css\";\n\nfunction Map({countries, caseType, center, zoom}) {\n  \n\n function MyComponent() {\nconst map = useMap();\nmap.flyTo(center,zoom);\n  return null\n\n}\n\n\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\"\n        //   attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\n        />\n        <MyComponent/>\n        {showDataOnMap(countries, caseType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map\n\n","import React from 'react'\nimport \"./Table.css\"\nimport numeral from \"numeral\"\nfunction Table({countries}) {\n    return (\n        <div className=\"table\">\n            {countries.map(({country,cases},i) => (\n                <tr key={i}>\n                    <td>{country}</td>\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table;\n","import React,{useEffect,useState}from 'react';\nimport {buildChartData} from './util';\nimport numeral from 'numeral';\nimport {Line} from 'react-chartjs-2';\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          parser: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\n\nfunction LineGraph({caseType},...props) {\n    const [data,setData] = useState([])\n    \n    useEffect(() => {\n       const  getGraphData = async() => {\n        await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n        .then(res => res.json())\n        .then(data => {\n            console.log(data);\n            const chartData = buildChartData(data,caseType);\n            setData(chartData);\n             })\n        }\n    \n    getGraphData()\n    \n    },[caseType])\n\n    return (\n        <div className={props.className}>\n            {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n        </div>\n    )\n}\n\nexport default LineGraph\n","import './App.css';\nimport React,{useState,useEffect} from \"react\";\nimport {MenuItem, FormControl ,Select ,Card, CardContent} from '@material-ui/core';\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport {sortData, prettyPrintStat} from \"./util\"\nimport Line from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport numeral from \"numeral\";\n\nfunction App() {\n    const [countries,setCountries] = useState([])\n    const [mapCountires,setMapCountries] = useState([])\n    const [country,setCountry] = useState('worldwide')\n    const [countryInfo,setCountryInfo] = useState({})\n    const [tableData,setTableData] = useState([])\n    const [casesType, setCasesType] = useState(\"cases\");\n    const [mapCenter,setMapCenter] = useState( [22.253116,22.112647]);\n    const [mapZoom,setMapZoom] = useState(2);\n\n    useEffect(() => {\n      fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n  \n\n    useEffect(() => {\n    const getCountriesData = async () => {\n      const res = await fetch('https://disease.sh/v3/covid-19/countries')\n      res.json()\n      .then(data => {\n        const countries = data.map(country => ({\n          name : country.country,\n          value: country.countryInfo.iso2\n        }))\n        const sortedData = sortData(data);\n        console.log(data);\n        setTableData(sortedData);\n        setCountries(countries);\n        setMapCountries(data);\n        // console.log(countries); fetching country name for drop down list \n      })\n    }\n    \n    getCountriesData()\n    },[])\n\n\n  const onCountryChnage = async (e) => {\n    e.preventDefault();\n    const countryCode = e.target.value;\n    \n    const url = countryCode === \"worldwide\" \n    ? 'https://disease.sh/v3/covid-19/all'\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n    .then(res => res.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data)\n      if(countryCode === \"worldwide\"){\n        setMapCenter([34.80746,-40.4796 ])\n            setMapZoom(2)\n      } else {\n        setMapCenter([data.countryInfo.lat,data.countryInfo.long]);\n            setMapZoom(4.5)\n      }\n    })\n    // handleLocation();\n  }\n\n\n  return (\n\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n        <h1 className=\"app__title\">COVID-19 TRACKER</h1>\n        <FormControl className=\"app__dropdown\">\n          <Select \n          variant=\"outlined\"\n          value={country}\n          onChange={onCountryChnage}\n          >\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n              countries.map((country) => {\n                return <MenuItem value={country.value}>{country.name}</MenuItem>\n              }\n              )}\n          </Select>\n        </FormControl>\n      </div>\n\n      <div className=\"app__stats\">\n              <InfoBox \n              onClick = {(e) => setCasesType(\"cases\")}\n              title=\"Covid Cases\" \n              active={casesType === \"cases\"}\n              cases={prettyPrintStat( countryInfo.todayCases)} \n              total={numeral( countryInfo.cases ).format(\"0.0a\")} \n              isRed\n              />\n\n              <InfoBox \n              onClick = {(e) => setCasesType(\"recovered\")}\n              title=\"Recovered\" \n              active={casesType === \"recovered\"}\n              cases={prettyPrintStat(countryInfo.todayRecovered)} \n              total={numeral(countryInfo.recovered).format(\"0,0a\")} \n              isGreen\n              />\n\n              <InfoBox \n              onClick = {(e) => setCasesType(\"deaths\")}\n              title=\"Deaths\" \n              active={casesType === \"deaths\"}\n              cases={prettyPrintStat(countryInfo.todayDeaths)} \n              total={numeral(countryInfo.deaths).format(\"0,0a\")}\n              isOrange\n              />\n\n      </div>\n\n      <Map \n      countries ={mapCountires}\n      caseType={casesType}\n      center={mapCenter}\n      zoom={mapZoom}\n      />\n      </div>\n\n        <Card className=\"app__right\">\n          <CardContent>\n            <div className=\"app__information\">\n          <h2>Live cases by country</h2>\n          <Table countries={tableData}/>\n\n\n          <h2 className=\"app__graphTitle\">World new cases</h2>\n          <Line className =\"app__graph\" caseType={casesType}/>\n            </div>\n\n        </CardContent>\n         </Card>\n    </div>\n\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}